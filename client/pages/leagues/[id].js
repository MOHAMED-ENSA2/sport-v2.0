import React, {useState, useEffect} from 'react'
import MainCard from "../../components/MainCard"
import Card from "../../components/Card"
import Head from 'next/head'
import { useRouter } from 'next/router'

import * as date from "../../utils/date"
import http from '../../service/http'
import {apiEndpoint} from "../../config/configData.json"
import styles from "../../styles/League.module.css"
import LastNews from '../../components/LastNews'
import Table from '../../components/Table'
import TopScorer from '../../components/TopScorer'
import Match from '../../components/Match'

function League() {
    const router = useRouter()
    const {id} = router.query
    const [selectedItem , setSelectedItem] = useState("news")
    
    const [news , setNews] = useState([])
    const [table , setTable] = useState([])
    const [topscorer , seTopscorer] = useState([])
    const [matches , setMatches] = useState([])
    const [results , setResults] = useState([])
    const [league , setLeague] = useState([])

    useEffect(() => {

        if(id){
            http.get(apiEndpoint + "/getTagSubjets/" + id )
            .then((res) => {
                setNews(res.data)
                console.log("news : " , res.data)
            })
            .catch(error => {
                console.error(error)
            })

            http.get(apiEndpoint + "/leagues/" + id )
            .then((res) => {
                setLeague(res.data)
                console.log("league : " , res.data)
            })
            .catch(error => {
                console.error(error)
            })

            http.get(apiEndpoint + "/getLeagueMatches/" + id + "/" +  date.generateTodayDate())
            .then((res) => {
                setMatches(res.data)
                console.log("matches : " , res.data)
            })
            .catch(error => {
                console.error(error)
            })

            http.get(apiEndpoint + "/getLeagueResults/" + id + "/" +  date.generateTodayDate())
            .then((res) => {
                setResults(res.data)
                console.log("results : " , res.data.reverse())
            })
            .catch(error => {
                console.error(error)
            })

            http.get(apiEndpoint + "/table" + "/" + id)
            .then((res) => {
                setTable(res.data)
                console.log("table : " , res.data)
            })
            .catch(error => {
                console.error(error)
            })

            http.get(apiEndpoint + "/topScorers/" + id)
            .then((res) => {
                seTopscorer(res.data)
                console.log("scorer : " , res.data)
            })
            .catch(error => {
                console.error(error)
            })
        }

    },[id])

    const handleSelection = (target) => {
        setSelectedItem(target)
    }

  return (
    <div className={styles.container}>
        <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />

            <link rel="preconnect" href="https://fonts.googleapis.com" />
            <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin />
            <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@300;400;500;600;700;800&display=swap" rel="stylesheet" />
            <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css" rel="stylesheet" />

        </Head>
        <div className={styles.wrapper}>
            <div className={styles.title}>
                {league.Title + " ( " +  league.Year + "-" + league.Year2 + " )"}
            </div>
            <div className={styles.sections}>
                <div onClick={() => handleSelection("news")} style = {{background: selectedItem === "news" ? "rgb(var(--clr-grey))" : ""   }}>
                    الأخبار
                </div>
                <div onClick={() => handleSelection("table")} style = {{background: selectedItem === "table" ? "rgb(var(--clr-grey))" : ""   }}>
                    الترتيب
                </div>
                <div onClick={() => handleSelection("matches")} style = {{background: selectedItem === "matches" ? "rgb(var(--clr-grey))" : ""   }}>
                    المباريات
                </div>
                <div onClick={() => handleSelection("results")} style = {{background: selectedItem === "results" ? "rgb(var(--clr-grey))" : ""   }}>
                    النتائج
                </div>
                <div onClick={() => handleSelection("topscorer")} style = {{background: selectedItem === "topscorer" ? "rgb(var(--clr-grey))" : ""   }}>
                    الهدافين
                </div>
                <div onClick={() => handleSelection("other1")} style = {{background: selectedItem === "other1" ? "rgb(var(--clr-grey))" : ""   }}>
                    الإنتقالات
                </div>
                <div onClick={() => handleSelection("other2")} style = {{background: selectedItem === "other2" ? "rgb(var(--clr-grey))" : ""   }}>
                    الفيديو
                </div>
            </div>
            {   selectedItem === "news" ?
                <div className={styles.main}>
                    <div className={styles.maincard}>
                        <MainCard image = "/images/salah.jpg" />
                        <LastNews />
                    </div>
                    <div className={styles.cards}>
                        <Card image = "/images/salah.jpg" />
                        <Card image = "/images/salah.jpg" />
                        <Card image = "/images/salah.jpg" />
                        <Card image = "/images/salah.jpg" />
                        <Card image = "/images/salah.jpg" />
                        <Card image = "/images/salah.jpg" />
                    </div>
                </div>
                : selectedItem === "table" 
                ? <Table
                        data = {table.Entries}
                  />
                : selectedItem === "topscorer" 
                ? <TopScorer
                        data = {topscorer.Scorers.slice(0,20)}
                />
                : selectedItem === "matches"
                ? 
                matches.map((elm,index) => {
                    return(
                        <Match 
                            key={index}
                            type = "B"
                            league = {elm.Matches[0].League}
                            matches = {elm.Matches}
                        />
                    )
                })
                : selectedItem === "results"
                ?  
                results.map((elm,index) => {
                    return(
                        <Match 
                            key={index}
                            type = "B"
                            league = {elm.Matches[0].League}
                            matches = {elm.Matches}
                        />
                    )
                })
                :  <div className={styles.main}>
                        <div className={styles.maincard}>
                            <MainCard image = "/images/salah.jpg" />
                            <LastNews />
                        </div>
                        <div className={styles.cards}>
                            <Card image = "/images/salah.jpg" />
                            <Card image = "/images/salah.jpg" />
                            <Card image = "/images/salah.jpg" />
                            <Card image = "/images/salah.jpg" />
                            <Card image = "/images/salah.jpg" />
                            <Card image = "/images/salah.jpg" />
                        </div>
                    </div>
            }

        </div>
    </div>
  )
}

export default League